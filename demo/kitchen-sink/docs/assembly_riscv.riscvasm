.text;
.global _start;

#### BEGIN _start
_start:
	li s0, 0x1040;		# GPIO address
	add s1, zero, zero;	# GPIO status 1
	addi s1, zero, 3;	# GPIO status 2
	#ori s1, zero, 0x7;	# This is if you want strong driver
infinite:
	li t0, 0x6000;	# Counter
	li t1, 0x1;
	for_counter_1:
		sub t0, t0, t1;
		bne t0, zero, for_counter_1;
	xori s1, s1, 0x3;	# Toogle GPIO status
	xori s2, s2, 0x3;	# Toogle GPIO status
	andi s1, s1, 0x7;
	andi s2, s2, 0x7;
	sw s1, 0(s0);		# Write to GPIO 1
	sw s1, 4(s0);		# Write to GPIO 2
	sw s1, 8(s0);		# Write to GPIO 3
	sw s2, 12(s0);		# Write to GPIO 4
	sw s2, 16(s0);		# Write to GPIO 5
	sw s2, 20(s0);		# Write to GPIO 6
	#sw s1, 24(s0);		# Write to GPIO 7
	#sw s1, 28(s0);		# Write to GPIO 8
	jal zero, infinite;

.data;
sizedata:  .word 0x78;
encdata:
encdata0:  .word 0x3c3385e5;
encdata1:  .word 0x54c04fe5;
encdata2:  .word 0x5448c4b8;
encdata3:  .word 0x5a6e3338;
encdata4:  .word 0xab86f85c;
encdata5:  .word 0xaede10bc;
encdata6:  .word 0xea3a5a76;
encdata7:  .word 0xdae5fdf2;
encdata8:  .word 0x9e23f267;
encdata9:  .word 0x22dd3d18;
encdata10:  .word 0xe8689576;
encdata11:  .word 0xefefa946;
encdata12:  .word 0x78861b2a;
encdata13:  .word 0x4834979d;
encdata14:  .word 0x38c18f22;
encdata15:  .word 0x6d893a08;
encdata16:  .word 0x53e34287;
encdata17:  .word 0x5526141c;
encdata18:  .word 0xbb8ab56;
encdata19:  .word 0x6a56be8;
encdata20:  .word 0x701ca74e;
encdata21:  .word 0x8271cdcb;
encdata22:  .word 0x7298aa9a;
encdata23:  .word 0x434f078b;
encdata24:  .word 0x3d06f3fd;
encdata25:  .word 0xf329e935;
encdata26:  .word 0xc0178037;
encdata27:  .word 0x6a45b953;
encdata28:  .word 0x975ab4c9;
encdata29:  .word 0x42539e07;
